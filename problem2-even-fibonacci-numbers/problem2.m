%-----------------------------------------------------------------------------%
%
% File: problem2.m
% Main author: Sean Charles
% Date: Sun Apr  3 13:14:05 2022
%
%-----------------------------------------------------------------------------%
% PROBLEM 2: Even Fibonacci numbers
%
% Each new term in the Fibonacci sequence is generated by adding the previous
% two terms. By starting with 1 and 2, the first 10 terms will be:
%
% 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
%
% By considering the terms in the Fibonacci sequence whose values do not exceed
% four million, find the sum of the even-valued terms.
%
%-----------------------------------------------------------------------------%
:- module problem2.

:- interface.
:- import_module io.

:- pred main(io::di, io::uo) is det.

:- implementation.
:- import_module int.
:- import_module list.
:- import_module string.


main(!IO) :-
    io.command_line_arguments(Args, !IO),
    (
        Args = [ Arg1 |_]
    ->
            % ASSUME its a valid number!
        Limit = string.det_to_int(Arg1),

            % Start at beginning, total is pre-loaded to 2.
        fib_count_2(1, 2, Limit, 2, Sum),

        io.format("sum of evens <= %i is: %i\n",
            [i(Limit), i(Sum)], !IO)
    ;
        io.format("usage:- ./problem2 N\n", [], !IO)
    ).


%----------------------------------------------------------------------------%

    % Version 1, traditional if-then-else.
    % Calculate the -current- number based on F1+F2, add to the
    % total and rinse-repeat until the limit is reached.
    %
:- pred fib_count(int::in, int::in, int::in, int::in, int::out) is det.

fib_count(F1, F2, Limit, !Total) :-
    F = F1 + F2,
    ( if F =< Limit then
        ( if F mod 2 = 0 then
            fib_count(F2, F, Limit, !.Total + F, !:Total)
        else
            fib_count(F2, F, Limit, !Total)
        )
    else
        true
    ).

%----------------------------------------------------------------------------%

    % Version2, alternative syntax.
    %
:- pred fib_count_2(int::in, int::in, int::in, int::in, int::out) is det.

fib_count_2(F1, F2, Limit, !Total) :-
    F = F1 + F2,
    (
        F =< Limit
    ->
        (   F mod 2 = 0
        ->
            fib_count_2(F2, F, Limit, !.Total + F, !:Total)
        ;
            fib_count_2(F2, F, Limit, !Total)
        )
    ;
        true
    ).


%----------------------------------------------------------------------------%
:- end_module problem2.
%----------------------------------------------------------------------------%
